include methods

article.post-container.is-flex.is-justify-content-center.section.container.is-max-widescreen.pt-4.px-2
        div.columns.is-variable.is-1-tablet.is-3-desktop-only.is-2-widescreen.is-full-width
            section.column
                if page.posts.length > 0
                    each post in page.posts.sort('date', -1).toArray()
                        - var postURL = url_for(post.path)
                        - var imgURL = post.cover || getPostCoverImg(post)
                        - var isExcerpt = post.excerpt && post.excerpt.length > 0
                        - var postContent = isExcerpt ? post.excerpt : post.content
                        article.post-item-card
                            if imgURL
                                header.is-relative.is-flex.tlo-header
                                    div.post-cover-backdrop.is-hidden
                                        img(src= imgURL alt="loading.." srcset= getSrcset(imgURL) sizes="(min-width: 931px) 600px, (min-width: 769px) calc( ( 100vw - 16px ) / 3 * 2 - 10px ), (min-width: 640px) 600px, calc( 100vw - 40px )" loading="lazy")
                                    
                                    if post.video
                                        a.post-cover-link.has-text-centered.skeleton(href= postURL)
                                            img.post-cover-img.js-img-fadeIn(src= imgURL alt="loading.." srcset= getSrcset(imgURL) sizes="(min-width: 931px) 600px, (min-width: 769px) calc( ( 100vw - 16px ) / 3 * 2 - 10px ), (min-width: 640px) 600px, calc( 100vw - 40px )" loading="lazy", data-backdrop="true")
                                            video.is-hidden.post-cover-img.js-video(muted loop preload="metadata" playsinline)
                                                source(src=`https://videodelivery.net/${post.video}/manifest/video.mpd` type="application/dash+xml")
                                                source(src=`https://videodelivery.net/${post.video}/manifest/video.m3u8` type="application/x-mpegURL")
                                    else
                                        a.post-cover-link.has-text-centered.skeleton(href= postURL)
                                            img.post-cover-img.js-img-fadeIn(src= imgURL alt="loading.." srcset= getSrcset(imgURL) sizes="(min-width: 931px) 600px, (min-width: 769px) calc( ( 100vw - 16px ) / 3 * 2 - 10px ), (min-width: 640px) 600px, calc( 100vw - 40px )" loading="lazy", data-backdrop="true")
                            section.content.post-card-content.p-4.pb-5
                                if post.categories.toArray().find(category => category.name === '视频') || (post.tags && post.tags.length > 0)
                                    header
                                        if post.categories.toArray().find(category => category.name === '视频')
                                            a(href= url_for(`/categories/视频/`))
                                                i.tag.post-item-tag(style="color: #3273dc; border-color: #3273dc")="视频"
                                        each tag in post.tags.toArray()
                                            a(href= url_for(`/tags/${tag.name}`))
                                                i.tag.post-item-tag= tag.name
                                if post.title
                                    h2.mt-4.mb-0.is-family-serif
                                        a(href= postURL)= post.title
                                if post.date
                                    time.has-text-grey(datetime=post.date.toJSON())= date(post.date, date_format)
                                p.is-flex-grow-2.mt-2
                                    = truncate( strip_html(postContent), {length: 360, omission: '..'} )
                                a.button.is-default.mt-2.has-text-weight-semibold(href= postURL)= post.video ? '播放' : __('read_more')
                    -
                        // turnPage
                        var paginatorResult = paginator({
                            escape: false,
                            prev_text: `<i class="iconfont icon-prev has-text-grey"></i>`,
                            next_text: `<i class="iconfont icon-next has-text-grey"></i>`,
                        })
                        var pageNumber = strip_html(paginatorResult)
                        var showPageIndicator = pageNumber - 0 !== 1
                    if showPageIndicator
                        section.paginator.is-flex.is-justify-content-flex-end.is-flex-wrap-wrap.mt-5!= paginatorResult
            aside.column.is-4-tablet.is-3-widescreen
                block sidebar
block append script
    script.
        $claudia.fadeInImage(null, $claudia.blurBackdropImg)

        window.addEventListener('resize', $claudia.throttle(function () {
            var images = document.querySelectorAll('.js-img-fadeIn')

            images.forEach($claudia.blurBackdropImg)
        }, 150))
        

        document.querySelectorAll('.js-video').forEach(function (video) {
            video.playbackRate = 2
            video.parentNode.previousElementSibling.classList.remove('is-hidden')
            video.addEventListener('loadedmetadata', (event) => {
                videoScroll()
                video.parentNode.classList.remove('skeleton')
            });
            video.addEventListener('playing', (event) => {
                video['data-playing'] = true
                video.parentNode.classList.remove('skeleton-with-content')
                video.previousElementSibling.classList.add('is-hidden')
                video.classList.remove('is-hidden')
            });
        })

        var timeout

        function videoScroll () {
            if (timeout) {
                clearTimeout(timeout)
            }
            timeout = setTimeout(function () {
                var hasHover = false
                document.querySelectorAll('.tlo-header').forEach(function (header) {
                    if (!hasHover && header.getBoundingClientRect().top + header.clientHeight < window.innerHeight && header.getBoundingClientRect().top > 58) {
                        header.classList.add('hover')
                        hasHover = true

                        var video = header.querySelector('.js-video')
                        if (video) {
                            if (!video['data-playing']) {
                                video.parentNode.classList.add('skeleton-with-content')
                            }
                            if (!video['data-loaded']) {
                                video['data-loaded'] = true
                                if (Hls.isSupported() && !video.canPlayType('application/x-mpegURL') && !video.canPlayType('application/dash+xml')) {
                                    var hls = new Hls();
                                    video['data-hls'] = hls;
                                    // bind them together
                                    hls.attachMedia(video);
                                    // MEDIA_ATTACHED event is fired by hls object once MediaSource is ready
                                    hls.on(Hls.Events.MEDIA_ATTACHED, function () {
                                        video.querySelectorAll('source[type="application/x-mpegURL"]').forEach( function (source) {
                                            hls.loadSource(source.src)
                                        })
                                    });
                                }
                            }
                            try {
                                video.play()
                            } catch(_) {
                                video['data-playing'] = true
                                video.parentNode.classList.remove('skeleton-with-content')
                            }
                        }
                    } else {
                        header.classList.remove('hover')

                        var video = header.querySelector('.js-video')
                        if (video) {
                            video.parentNode.classList.remove('skeleton-with-content')
                            video.pause()
                            video['data-loaded'] = false
                            if (video['data-hls'] && typeof video['data-hls'] === 'function') {
                                video['data-hls'].destroy()
                                video.previousElementSibling.classList.remove('is-hidden')
                                video.classList.add('is-hidden')
                            }
                        }
                    }
                })
            }, 100)
        }

        window.addEventListener('load', function () { setTimeout(videoScroll, 500) })
        window.addEventListener('scroll', videoScroll)
