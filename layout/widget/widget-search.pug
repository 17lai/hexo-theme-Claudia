style.
    .search-widget .search-input {
        border: none;
        outline: none;
        background: transparent;
        color: var(--second-text-color);
        font-size: 16px;
    }
    .search-widget .search-content {
        position: absolute;
        left: 0;
        top: calc(100% - 3px);
        z-index: 2;

        width: 100%;
        height: auto;
        max-height: 0;

        overflow: auto;
        box-sizing: border-box;

        background: var(--second-bg-color);
        backdrop-filter: blur(var(--backdropFilter));
        -webkit-backdrop-filter: blur(var(--backdropFilter));

        border-bottom-left-radius: var(--borderRadius);
        border-bottom-right-radius: var(--borderRadius);
        box-shadow: 0 12px 15px rgba(0, 0, 0, 0.08);

        transition: max-height 500ms;
        margin: -1px;
        width: calc(100% + 2px);
    }

    .search-widget .search-content a:hover h5 {
        color: #3273dc!important;
    }

    .search-widget {
        transition-property: width, transform;
        transition-duration: 500ms;
        z-index: 2;
        width: 100%;
    }

    .search-widget.focus-within .search-content {
        border: 1px solid var(--border-line-color);
    }

    @media screen and (min-width: 769px) {
        .search-widget:focus-within, .search-widget.focus-within {
            width: calc(100vw - 24px);
            transform: translateX(calc((16px - 100vw)/3*2));
        }

        .columns section.column {
            margin-top: 0;
            transition: margin-top 500ms;
        }

        .columns:focus-within section.column, .columns.focus-within section.column {
            margin-top: 61px;
        }
    }

    @media screen and (min-width: 1024px) {
        .search-widget:focus-within, .search-widget.focus-within {
            width: 920px;
            transform: translateX(-629.33px);
        }
    }

    @media screen and (min-width: 1216px) {
        .search-widget:focus-within, .search-widget.focus-within {
            width: 1120px;
            transform: translateX(-852px);
        }
    }

    @media screen and (min-width: 1408px) {
        .search-widget:focus-within, .search-widget.focus-within {
            width: 1312px;
            transform: translateX(-996px);
        }
    }

main.aside-card-container.search-widget.is-relative#searchContainer
    label(for="searchInput")
        div#searchButton.is-flex.px-4
                svg.icon.mr-1
                    use(xlink:href="#icon-search")
                input#searchInput.search-input.is-flex-grow-1(placeholder= _p('search_input_placeholder'))
    section#searchContent.search-content.content

script.
    var searchDatabase = []
    var columnsEl = document.getElementById('columns')
    var searchContainerEl = document.getElementById('searchContainer')
    var searchInputEl = document.getElementById('searchInput')
    var searchButtonEl = document.getElementById('searchButton')
    var searchResultEl = document.getElementById('searchContent')

    var matomoTrack = $claudia.throttle(function (e) {
        window._paq && _paq.push(e)
    }, 500)

    searchInputEl.oninput = function (evt) {
        var searchValue = evt.srcElement.value
        var haveSearchValue = Boolean(searchValue.trim())
        if (!haveSearchValue) {
            searchResultEl.style.maxHeight = 0
            searchContainerEl.classList.remove("focus-within")
            columnsEl && columnsEl.classList.remove("focus-within")
            return
        }


        var searchResults = searching(searchValue)
        matomoTrack(['trackSiteSearch', searchValue, null, searchResults.length])

        if (searchResults.length > 0) {
            renderSearchResults(searchResults)
        }
    }

    function renderSearchResults(results) {
        searchResultEl.innerHTML = null
        var fragment = document.createDocumentFragment()

        results.forEach(function (item) {
            var link = document.createElement('a')
            var title = document.createElement('h5')
            var content = document.createElement('p')

            title.className = 'mb-1'
            title.innerText = item.title
            content.innerHTML = item.content

            link.href = item.link
            link.appendChild(title)
            link.appendChild(content)
            link.className = 'p-4 is-block'

            fragment.appendChild(link)
        })

        searchResultEl.appendChild(fragment)
        searchResultEl.style.maxHeight = '550px'
        searchContainerEl.classList.add("focus-within")
        columnsEl && columnsEl.classList.add("focus-within")
    }

    function searching(inputText) {
        var inputTexts = inputText.split(' ')
        var searchResults = []
        inputTexts.forEach(function (searchKey) {
            var haveSearchValue = Boolean(searchKey.trim())
            if (!haveSearchValue) return

            var key = searchKey.toLowerCase()

            for (var entry of searchDatabase) {
                var title = entry.getElementsByTagName('title')[0].textContent
                var link = entry.getElementsByTagName('link')[0].getAttribute('href')
                var contentWithTags = entry.getElementsByTagName('content')[0].textContent
                var content = contentWithTags.trim().replace(/<[^>]+>/g, '')
                var rawContent = content.toLowerCase()

                var LENGTH = 80
                var finalContent = ''
                var contentLength = rawContent.length
                var searchResultIdx = rawContent.indexOf(key)

                var startIdx = searchResultIdx - 20,
                    endIdx = startIdx + LENGTH

                if (startIdx < 0) {
                    startIdx = 0
                    endIdx = 100
                }

                endIdx > contentLength && (endIdx = contentLength)

                finalContent = content.substring(startIdx, endIdx)

                if (title.indexOf(key) > -1 || searchResultIdx > -1) {
                    searchResults.push({
                        link: link,
                        title: title,
                        content: finalContent
                    })
                }
            }
        })
        return searchResults
    }

    searchButtonEl.onclick = function () {
        if (searchDatabase.length > 0) return;

        fetch(window.location.href + '/search.xml').then(res => res.text()).then(res => {
            var domparser = new DOMParser
            var doc = domparser.parseFromString(res, 'application/xml')
            searchDatabase = doc.getElementsByTagName('search')[0].children
        })
    }

